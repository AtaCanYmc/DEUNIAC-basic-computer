// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2021 14:51:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    2019510083_Ata_Can_Yaymaci_Deuniac
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 2019510083_Ata_Can_Yaymaci_Deuniac_vlg_sample_tst(
	Clock,
	Input,
	sampler_tx
);
input  Clock;
input [3:0] Input;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Input)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 2019510083_Ata_Can_Yaymaci_Deuniac_vlg_check_tst (
	IR_out,
	OUTR_out,
	Q,
	Sequance,
	sampler_rx
);
input [10:0] IR_out;
input [3:0] OUTR_out;
input  Q;
input [2:0] Sequance;
input sampler_rx;

reg [10:0] IR_out_expected;
reg [3:0] OUTR_out_expected;
reg  Q_expected;
reg [2:0] Sequance_expected;

reg [10:0] IR_out_prev;
reg [3:0] OUTR_out_prev;
reg  Q_prev;
reg [2:0] Sequance_prev;

reg [10:0] IR_out_expected_prev;
reg [3:0] OUTR_out_expected_prev;
reg  Q_expected_prev;
reg [2:0] Sequance_expected_prev;

reg [10:0] last_IR_out_exp;
reg [3:0] last_OUTR_out_exp;
reg  last_Q_exp;
reg [2:0] last_Sequance_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	IR_out_prev = IR_out;
	OUTR_out_prev = OUTR_out;
	Q_prev = Q;
	Sequance_prev = Sequance;
end

// update expected /o prevs

always @(trigger)
begin
	IR_out_expected_prev = IR_out_expected;
	OUTR_out_expected_prev = OUTR_out_expected;
	Q_expected_prev = Q_expected;
	Sequance_expected_prev = Sequance_expected;
end


// expected Sequance[ 2 ]
initial
begin
	Sequance_expected[2] = 1'bX;
end 
// expected Sequance[ 1 ]
initial
begin
	Sequance_expected[1] = 1'bX;
end 
// expected Sequance[ 0 ]
initial
begin
	Sequance_expected[0] = 1'bX;
end 
// expected IR_out[ 10 ]
initial
begin
	IR_out_expected[10] = 1'bX;
end 
// expected IR_out[ 9 ]
initial
begin
	IR_out_expected[9] = 1'bX;
end 
// expected IR_out[ 8 ]
initial
begin
	IR_out_expected[8] = 1'bX;
end 
// expected IR_out[ 7 ]
initial
begin
	IR_out_expected[7] = 1'bX;
end 
// expected IR_out[ 6 ]
initial
begin
	IR_out_expected[6] = 1'bX;
end 
// expected IR_out[ 5 ]
initial
begin
	IR_out_expected[5] = 1'bX;
end 
// expected IR_out[ 4 ]
initial
begin
	IR_out_expected[4] = 1'bX;
end 
// expected IR_out[ 3 ]
initial
begin
	IR_out_expected[3] = 1'bX;
end 
// expected IR_out[ 2 ]
initial
begin
	IR_out_expected[2] = 1'bX;
end 
// expected IR_out[ 1 ]
initial
begin
	IR_out_expected[1] = 1'bX;
end 
// expected IR_out[ 0 ]
initial
begin
	IR_out_expected[0] = 1'bX;
end 
// expected OUTR_out[ 3 ]
initial
begin
	OUTR_out_expected[3] = 1'bX;
end 
// expected OUTR_out[ 2 ]
initial
begin
	OUTR_out_expected[2] = 1'bX;
end 
// expected OUTR_out[ 1 ]
initial
begin
	OUTR_out_expected[1] = 1'bX;
end 
// expected OUTR_out[ 0 ]
initial
begin
	OUTR_out_expected[0] = 1'bX;
end 

// expected Q
initial
begin
	Q_expected = 1'bX;
end 
// generate trigger
always @(IR_out_expected or IR_out or OUTR_out_expected or OUTR_out or Q_expected or Q or Sequance_expected or Sequance)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected IR_out = %b | expected OUTR_out = %b | expected Q = %b | expected Sequance = %b | ",IR_out_expected_prev,OUTR_out_expected_prev,Q_expected_prev,Sequance_expected_prev);
	$display("| real IR_out = %b | real OUTR_out = %b | real Q = %b | real Sequance = %b | ",IR_out_prev,OUTR_out_prev,Q_prev,Sequance_prev);
`endif
	if (
		( IR_out_expected_prev[0] !== 1'bx ) && ( IR_out_prev[0] !== IR_out_expected_prev[0] )
		&& ((IR_out_expected_prev[0] !== last_IR_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[0] = IR_out_expected_prev[0];
	end
	if (
		( IR_out_expected_prev[1] !== 1'bx ) && ( IR_out_prev[1] !== IR_out_expected_prev[1] )
		&& ((IR_out_expected_prev[1] !== last_IR_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[1] = IR_out_expected_prev[1];
	end
	if (
		( IR_out_expected_prev[2] !== 1'bx ) && ( IR_out_prev[2] !== IR_out_expected_prev[2] )
		&& ((IR_out_expected_prev[2] !== last_IR_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[2] = IR_out_expected_prev[2];
	end
	if (
		( IR_out_expected_prev[3] !== 1'bx ) && ( IR_out_prev[3] !== IR_out_expected_prev[3] )
		&& ((IR_out_expected_prev[3] !== last_IR_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[3] = IR_out_expected_prev[3];
	end
	if (
		( IR_out_expected_prev[4] !== 1'bx ) && ( IR_out_prev[4] !== IR_out_expected_prev[4] )
		&& ((IR_out_expected_prev[4] !== last_IR_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[4] = IR_out_expected_prev[4];
	end
	if (
		( IR_out_expected_prev[5] !== 1'bx ) && ( IR_out_prev[5] !== IR_out_expected_prev[5] )
		&& ((IR_out_expected_prev[5] !== last_IR_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[5] = IR_out_expected_prev[5];
	end
	if (
		( IR_out_expected_prev[6] !== 1'bx ) && ( IR_out_prev[6] !== IR_out_expected_prev[6] )
		&& ((IR_out_expected_prev[6] !== last_IR_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[6] = IR_out_expected_prev[6];
	end
	if (
		( IR_out_expected_prev[7] !== 1'bx ) && ( IR_out_prev[7] !== IR_out_expected_prev[7] )
		&& ((IR_out_expected_prev[7] !== last_IR_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[7] = IR_out_expected_prev[7];
	end
	if (
		( IR_out_expected_prev[8] !== 1'bx ) && ( IR_out_prev[8] !== IR_out_expected_prev[8] )
		&& ((IR_out_expected_prev[8] !== last_IR_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[8] = IR_out_expected_prev[8];
	end
	if (
		( IR_out_expected_prev[9] !== 1'bx ) && ( IR_out_prev[9] !== IR_out_expected_prev[9] )
		&& ((IR_out_expected_prev[9] !== last_IR_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[9] = IR_out_expected_prev[9];
	end
	if (
		( IR_out_expected_prev[10] !== 1'bx ) && ( IR_out_prev[10] !== IR_out_expected_prev[10] )
		&& ((IR_out_expected_prev[10] !== last_IR_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_out_expected_prev);
		$display ("     Real value = %b", IR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IR_out_exp[10] = IR_out_expected_prev[10];
	end
	if (
		( OUTR_out_expected_prev[0] !== 1'bx ) && ( OUTR_out_prev[0] !== OUTR_out_expected_prev[0] )
		&& ((OUTR_out_expected_prev[0] !== last_OUTR_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_out_expected_prev);
		$display ("     Real value = %b", OUTR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTR_out_exp[0] = OUTR_out_expected_prev[0];
	end
	if (
		( OUTR_out_expected_prev[1] !== 1'bx ) && ( OUTR_out_prev[1] !== OUTR_out_expected_prev[1] )
		&& ((OUTR_out_expected_prev[1] !== last_OUTR_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_out_expected_prev);
		$display ("     Real value = %b", OUTR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTR_out_exp[1] = OUTR_out_expected_prev[1];
	end
	if (
		( OUTR_out_expected_prev[2] !== 1'bx ) && ( OUTR_out_prev[2] !== OUTR_out_expected_prev[2] )
		&& ((OUTR_out_expected_prev[2] !== last_OUTR_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_out_expected_prev);
		$display ("     Real value = %b", OUTR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTR_out_exp[2] = OUTR_out_expected_prev[2];
	end
	if (
		( OUTR_out_expected_prev[3] !== 1'bx ) && ( OUTR_out_prev[3] !== OUTR_out_expected_prev[3] )
		&& ((OUTR_out_expected_prev[3] !== last_OUTR_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_out_expected_prev);
		$display ("     Real value = %b", OUTR_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTR_out_exp[3] = OUTR_out_expected_prev[3];
	end
	if (
		( Q_expected_prev !== 1'bx ) && ( Q_prev !== Q_expected_prev )
		&& ((Q_expected_prev !== last_Q_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp = Q_expected_prev;
	end
	if (
		( Sequance_expected_prev[0] !== 1'bx ) && ( Sequance_prev[0] !== Sequance_expected_prev[0] )
		&& ((Sequance_expected_prev[0] !== last_Sequance_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sequance[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sequance_expected_prev);
		$display ("     Real value = %b", Sequance_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sequance_exp[0] = Sequance_expected_prev[0];
	end
	if (
		( Sequance_expected_prev[1] !== 1'bx ) && ( Sequance_prev[1] !== Sequance_expected_prev[1] )
		&& ((Sequance_expected_prev[1] !== last_Sequance_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sequance[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sequance_expected_prev);
		$display ("     Real value = %b", Sequance_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sequance_exp[1] = Sequance_expected_prev[1];
	end
	if (
		( Sequance_expected_prev[2] !== 1'bx ) && ( Sequance_prev[2] !== Sequance_expected_prev[2] )
		&& ((Sequance_expected_prev[2] !== last_Sequance_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sequance[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sequance_expected_prev);
		$display ("     Real value = %b", Sequance_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sequance_exp[2] = Sequance_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 2019510083_Ata_Can_Yaymaci_Deuniac_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [3:0] Input;
// wires                                               
wire [10:0] IR_out;
wire [3:0] OUTR_out;
wire Q;
wire [2:0] Sequance;

wire sampler;                             

// assign statements (if any)                          
2019510083_Ata_Can_Yaymaci_Deuniac i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.\Input (Input),
	.IR_out(IR_out),
	.OUTR_out(OUTR_out),
	.Q(Q),
	.Sequance(Sequance)
);
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b0;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b0;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b0;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

2019510083_Ata_Can_Yaymaci_Deuniac_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Input(Input),
	.sampler_tx(sampler)
);

2019510083_Ata_Can_Yaymaci_Deuniac_vlg_check_tst tb_out(
	.IR_out(IR_out),
	.OUTR_out(OUTR_out),
	.Q(Q),
	.Sequance(Sequance),
	.sampler_rx(sampler)
);
endmodule

